// <auto-generated />
using System;
using MediaRequest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MediaRequest.Data.Migrations
{
    [DbContext(typeof(MediaDbContext))]
    [Migration("20190926235523_MoviePoster")]
    partial class MoviePoster
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MediaRequest.Domain.MoviePoster", b =>
                {
                    b.Property<int>("MoviePosterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Movie");

                    b.Property<string>("PosterUrl");

                    b.HasKey("MoviePosterId");

                    b.ToTable("MoviePoster");
                });

            modelBuilder.Entity("MediaRequest.Domain.Radarr.AlternativeTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("language");

                    b.Property<int>("movieId");

                    b.Property<int>("sourceId");

                    b.Property<string>("sourceType");

                    b.Property<string>("title");

                    b.Property<int>("voteCount");

                    b.Property<int>("votes");

                    b.HasKey("Id");

                    b.HasIndex("movieId");

                    b.ToTable("AlternativeTitle");
                });

            modelBuilder.Entity("MediaRequest.Domain.Radarr.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreName");

                    b.Property<int?>("MovieId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MediaRequest.Domain.Radarr.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverType");

                    b.Property<int?>("MovieId");

                    b.Property<string>("URL");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("MediaRequest.Domain.Radarr.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Added");

                    b.Property<bool>("Downloaded");

                    b.Property<string>("FolderName");

                    b.Property<bool>("HasFile");

                    b.Property<DateTime>("InCinemas");

                    b.Property<bool>("IsAvailable");

                    b.Property<string>("MinimumAvailability");

                    b.Property<bool>("Monitored");

                    b.Property<string>("Overview");

                    b.Property<string>("PathState");

                    b.Property<int>("ProfileId");

                    b.Property<int>("QualityProfileId");

                    b.Property<int?>("RatingsId");

                    b.Property<string>("RemotePoster");

                    b.Property<int>("Runtime");

                    b.Property<int>("SecondaryYearSourceId");

                    b.Property<string>("SizeOnDisk");

                    b.Property<string>("SortTitle");

                    b.Property<string>("Status");

                    b.Property<string>("TMDBId");

                    b.Property<string>("Title");

                    b.Property<string>("TitleSlug");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("RatingsId");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("MediaRequest.Domain.Radarr.Ratings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Value");

                    b.Property<int>("Votes");

                    b.HasKey("Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("MediaRequest.Domain.UserRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MovieId");

                    b.Property<bool>("Status");

                    b.Property<Guid>("UserId");

                    b.HasKey("RequestId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("MediaRequest.Domain.Radarr.AlternativeTitle", b =>
                {
                    b.HasOne("MediaRequest.Domain.Radarr.Movie")
                        .WithMany("AlternativeTitles")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaRequest.Domain.Radarr.Genre", b =>
                {
                    b.HasOne("MediaRequest.Domain.Radarr.Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("MediaRequest.Domain.Radarr.Image", b =>
                {
                    b.HasOne("MediaRequest.Domain.Radarr.Movie")
                        .WithMany("Images")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("MediaRequest.Domain.Radarr.Movie", b =>
                {
                    b.HasOne("MediaRequest.Domain.Radarr.Ratings", "Ratings")
                        .WithMany()
                        .HasForeignKey("RatingsId");
                });
#pragma warning restore 612, 618
        }
    }
}
